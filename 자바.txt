조건 판단문 if(조건) {
                        참일때;
                        } else {
                        거짓일 때;
                        }

            int speed;
            speed = 0;
            if(3>4) {
                    System.out.println("참입니다.");
            } else {
                    System.out.println("거짓입니다.");
            }


my car test 패키지
class bane : car
member
브랜드명 : brand (현대)
차종 : carName (소나타)
색상 : color
속도 : speed

- 메서드
가속 : speedUp 속도값을 주어서 변경한다.  100km이상이면 " 과속입니다."
멈춤 : stop 현재속도는 40km입니다. or 멈췄습니다.
현재속도 : currentSpeed 현재 스피드는 0km입니다 


MyCar class
1. car를 생성합니다.
2. 색상을 부여합니다.
3. 속도를 높여보고 현재속도 파악
4. 속도를 줄여보고 현재속도 파악
(10km씩 줄이고 늘리기)


package car;

public class Car {
    final String brand = "현대";
    final String carName = "소나타";
    String color = "Blue";
    int currentspeed = 0;


    void speedUp(int speed){
        currentspeed= currentspeed + speed;
        if (currentspeed > 100) {
            currentSpeed();
            System.out.println("과속입니다.");
        } else {
            currentSpeed();
        }
    }

    void stop(int speed){
        currentspeed = currentspeed + speed;
        if (currentspeed < 0) {
            currentSpeed();
            System.out.println("멈췄습니다.");
            if (currentspeed > 0){
                currentSpeed();
            }
        }
    }

    void currentSpeed(){
        System.out.println("현재 속도는" + currentspeed + "입니다");
    }
}





my sql

sql (씨퀄) - CRUD
creat    -> insert into
read    -> select
update 
delete 


스키마 (schema)
web server -> tomcat , nginx 등과 같은 프로그램을 사용
db server -> 





테이블 이름 : professor
id int primary key auto_increment
name  varchar(20)
belong  char(3)
phone   varchar(13)

create table professor(
id int primary key auto_increment,
name varchar(20) not null,
belong char(3) default 'FOO',
phone varchar(13));


제약조건 = constraints


외우기 ******
1. c(create) --- db -> insert
insert into (테이블명(필드1, 필드2, 필드3,...)) values(값1,값2,값3,...);


insert into professor(name, belong, phone) values('최종호','EZN','010-1111-1111');
insert into professor(name, belong, phone) values('유재석','IDE','010-2222-2222');
insert into professor(name, belong, phone) values('황영조','MSE','010-3333-3333');
insert into professor(name, belong, phone) values('케이멀','ESE','010-4444-4444');
insert into professor(name, belong, phone) values('강감찬','ESE','010-6666-6666');



2. R(read) --- select 구문
select * from 테이블명;


select * from professor;



3.D(delete) --- 삭제
delete from professor where 조건;

delete from professor where id = 101;







테이블 구조 - 스키마 (schema) 관계 도식화하는 방식을 ERD (Entity Relational Diagram)라고 한다.

table name : student
id int 기본키 자동증가
name varchar(20)
belong char(3)
tel varchar(13)
p(professor)_id



같은 타입의 맞춰야된다.

int - int
char - char
varchar - varchar



create table professor(
id int primary key auto_increment,
name varchar(20) not null,
belong char(3) default 'FOO',
phone varchar(13));





create table student(
id int primary key auto_increment,
name varchar(20),
belong char(3),
tel varchar(13),
p_id int);



정보의 구조를 바꾸는 명령어

alter table student modify column id varchar(8);




select from test_sample;
show tables;
desc student;
C:\javawork\mysql\test_schema.sql
C:\javawork\mysql\professor_data.sql
C:\javawork\mysql\student_data.sql




final = 변경하지 못하는 함수를 나타낼때 사용.
method = 심부름꾼(?)
void = 컴퓨터에서 스스로 알아듣기 쉬운 언어로 변형함.
return = 화면에서 보여줌.


shift + /  -> 전체를 주석형태로 만들어준다.



묵시적 캐스팅 (형변환)
실수에 정수를 더하면 더 큰값에 정수를 더하기 때문
up-casting

명시적 캐스팅 : 둘 중 한 값을 바꿔줘야된다.
double 을 int로 변환 혹은 int를 double로 바꿔줘야됨
down-casting





* : 와일드 카드 문자 ( wild card character)

*   : select 구문 내에서 활용되어진다.
*의 뜻은 없는 것까지 포함한 모든 .... 
dir v*.* : 내부 디렉터리 안을 본다. (맨 뒤 *은 확장자가 오면 된다.)

?   : 자리를 차지하고 있는 한문자.
    ex ) 김? = 김을 포함한 외자인 사람
 
%  :  select 구문의 조건절에서 사용하는 와일드카드  % = *
_   :     _ = ?



select * from 테이블명
where 조건
order by 기준필드 asc/desc.(ascendign/descending) (오름차선 정렬)
-----------------------------
group by 통계함수를 쓸때 사용한다.
having     



select * from professor order by name desc;



select name, phone from professor
where id >= 3
order by name des



select name, phone from professor
where id >=1 and id <=3
order by name des

select* from professor where id between 1 and 3;



belong(소속)이 IDE인 자료의 아이디,이름,수속을 출력하세요.
select id, name, belon from student where
belong = 'ide';

or

belong = 'ese';

or

belong = 'cse;


select id, name, belong from student
where belong in ('ide','ese','cse');
order by belong asc;



student 테이블에서 id가 2010으로 시작하는 자료들의 id와 이름

select id, name from student
where id like '2010%';


student 테이블에서 name이 세자인 자료찾기
select*from student where name like '___';




student 테이블에서 소속(belong)이 IDE가 아닌 자료들을 찾아보기
>=,<=, =, !=(<>) , not

select * from student where belong !='ide';

select * from student where not belong ='ide';


stdunet 테이블에서 id가 2009가 포함되지 않은 자료

select *from student where not id like '2009%';

select*from student where id not like '2009%';



student 테이블에서 belong이 IDE 또는 CSE 또는 MSe 인 자료중 ID에 2011을 포함하는 자료를
P_id에 대해 내림차순으로 정렬
(출력은 id,이름,소속,전화번호,교수_ID 로 column이름이 나타나도록한다)



select id, name '이름',belong'소속',tel'전화번호',p_id'교수_ID'
from student
where belong in('ide','cse','mse') and id like '2011%'
order by p_id desc;





테이블의 완전 삭제 : drop table 테이블명
DB 완전 삭제 : drop database db 명;
(쿼리 update, delete는 정신을 바짝 차리고 사용해야한다.)

테이블의 내용만 삭제 : 
delete from 테이블명 where 조건; 

전진을 삭제시키고 넣기
delete from student where name='전진';


insert into student values(20090302,'전진','IDE','01012321313',3);


학생 테이블 중 전화번호에 131을 포함하고 있는 자료를 삭제하세요.
delete from student where tel like '%131%';


update 구문

update table 이름 set 필드명 = 바꿀값


학생테이블의 id가 20080104 인 학생의 이름을 오나미로 바꿔라

update student set name = '오나미' where id =20080104


학생테이블의 이름이 부우인 친구의 belong을 MSE, 전화번호를 010-7777-7777로 바꾼다


update student set
belong = 'MSE',
tel = '010-7777-7777'
where name = '부우';




테이블 스키마 변경 --- Alter 구문

alter table 테이블명;
rename to 바꿀테이블명;



professor 테이블명을 teacher로 변경합니다.

alter table professor
rename(drop column, add column, change column, modify column) to teacher;


teacher 테이블에 star 라는 필드를 맨 마지막에 추가합니다.

alter table teacher
add column star int not null after phone


변경 (change , modify) - 칼럼의 이름을 변경 가능(change)

alter table teacher
modify column star bigint default 10000;

= workbench GUI 사용하면 편하다.



필드의 삭제 (drop column)
alter table teacher
dorp column star;


통계함수의 사용

select avg(p_id) from student
select avg(


내림차순 desc  / 오름차순 asc


학생테이블의 소속인원수를 소속(belong)의 내림차순으로 출력

select belong, count(*) from student
group by belong
order by belong desc;


학생테이블의 소속인원수를 인원수의 내림차순으로 출력하되, 같은 값은 belong의 오름차순으로 출력

select belong, count(belong) from student
group by belong
order by belong asc;                            이것은 무엇일까


select belong, count(belong) as belong_count from student
group by belong
order by belong_count desc, belong asc;



19번의 결과 중에 belong_count 가 3 이상인 자료만 출력

select belong, count(belong) as belong_count from student
group by belong
having belong_count>=3
order by belong_count desc, belong asc;



group 과 having 은 짝이다.
통계로 조건을 찾기위해서는 having이 필수다.
-----
group by ----
having ----
------


학생테이블에서 belong이 ide, mse, ese인 자료의 각 p_id의 평균을 구하고, 평균이 2 이하인 자료만
belong에 대해서 내림차순 정렬

select belong, avg(p_id) as avg from student
where belong in('ide','mse','ese')
group by belong
having avg <=2
order by belong desc;





















